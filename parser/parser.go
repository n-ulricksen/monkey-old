package parser

import (
	"github.com/ulricksennick/monkey/ast"
	"github.com/ulricksennick/monkey/lexer"
	"github.com/ulricksennick/monkey/token"
)

// Parser implementing recursive-descent parsing
type Parser struct {
	l *lexer.Lexer

	curToken  token.Token // current token under examination
	peekToken token.Token // next token; checked when forming program statements
}

// Create a new parser which will use the given lexer
func New(l *lexer.Lexer) *Parser {
	p := &Parser{l: l}

	// Read two tokens, so curToken and peekToken are both set
	p.nextToken()
	p.nextToken()

	return p
}

// Advance the parser's current and next tokens
func (p *Parser) nextToken() {
	p.curToken = p.peekToken
	p.peekToken = p.l.NextToken()
}

// Return a program node which represents the top node of abstract syntax tree
// generated by the parser. The AST will contain nodes representing the source
// code provided to the parser's lexer.
func (p *Parser) ParseProgram() *ast.Program {
	// Create a new program node
	program := &ast.Program{}
	// Program statements (children nodes of <program> in the AST)
	program.Statements = []ast.Statement{}

	// Iterate over tokens until end of file, parsing and appending statements
	// to the program node's statement list
	for p.curToken.Type != token.EOF {
		stmt := p.parseStatement()
		if stmt != nil {
			program.Statements = append(program.Statements, stmt)
		}
		p.nextToken()
	}

	// Return the program
	return program
}

// Parse a program statement depending on its token type starting with the
// parser's curToken
func (p *Parser) parseStatement() ast.Statement {
	switch p.curToken.Type {
	case token.LET:
		return p.parseLetStatement()
	default:
		return nil
	}
}

// Construct a "let statement" node with the parser's current token. Advance the
// parser tokens while checking/asserting the next token's type for the next
// expected token type. (let <IDENT> = <expression>)
func (p *Parser) parseLetStatement() *ast.LetStatement {
	// Create let statement with current token (LET token)
	stmt := &ast.LetStatement{Token: p.curToken}

	// Check for identifier
	if !p.expectPeek(token.IDENT) {
		return nil
	}
	stmt.Name = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}

	// Check for ASSIGN node, "="
	if !p.expectPeek(token.ASSIGN) {
		return nil
	}

	// TODO: For now, we skip expressions until a semicolon is encountered
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

// Check whether the next token is of the expected token type
func (p *Parser) expectPeek(t token.TokenType) bool {
	if p.peekTokenIs(t) {
		p.nextToken()
		return true
	}
	return false
}

// Check if current token is of the given type
func (p *Parser) curTokenIs(t token.TokenType) bool {
	return p.curToken.Type == t
}

// Check if next token is of the given type
func (p *Parser) peekTokenIs(t token.TokenType) bool {
	return p.peekToken.Type == t
}
